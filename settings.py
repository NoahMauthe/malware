import logging
import logging.config
import argparse
import multiprocessing
import os
import sys

import psycopg2 as db

should_shutdown = False
shutdown_lock = multiprocessing.RLock()
db_string = ''
VERBOSE = 15
ANDROZOO_API_KEY = ''
VIRUSTOTAL_API_KEY = ''
WORKER_COUNT = 2 * multiprocessing.cpu_count()
DB_CONNECTION = None
ADDRESS = ('localhost', 6000)
BASE_QUERY = 'SELECT DISTINCT apks.sha256 FROM (apks LEFT OUTER JOIN results ON apks.sha256 = results.sha256)' \
             ' WHERE results.sha256 IS NULL'


def _setup_logging(args):
    logging.addLevelName(VERBOSE, "VERBOSE")
    loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG
    else:
        logging.getLogger('androguard').setLevel(logging.ERROR)
        if args.verbose:
            loglevel = VERBOSE
    console_formatter = logging.Formatter('[{levelname}] {{{name}}}\t{message}', style='{')
    console_handler = logging.StreamHandler()
    console_handler.setLevel(loglevel)
    console_handler.setFormatter(console_formatter)
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    root.addHandler(console_handler)
    if args.logfile:
        file_handler = logging.FileHandler(os.path.abspath(args.logfile))
        file_handler.setLevel(loglevel)
        file_handler.setFormatter(logging.Formatter('{asctime}\t[{levelname}] {{{name}}}\t{message}', style='{'))
        root.addHandler(file_handler)


def get_logger(name):
    logger = logging.getLogger(name.upper())
    logger.setLevel(VERBOSE)
    return logger


def init():
    parser = argparse.ArgumentParser()
    parser.add_argument('--csv', type=str, help='The csv file to create the database from.\n'
                                                'Required when running the program for the first time.',
                        default=None)
    parser.add_argument('--db', type=str, help='Changes the default database string')
    parser.add_argument('--androzoo', type=str, help='Specifies location of androzoo API Key', required=True)
    parser.add_argument('--verbose', action='store_true', help='Enables verbose logging')
    parser.add_argument('--debug', action='store_true', help='Enables debug output, prioritized over --verbose')
    parser.add_argument('--logfile', type=str, help='Enables debug output, prioritized over --verbose')
    parser.add_argument('--queries', type=str, help='Specifies a file containing partial SQL queries that determine'
                                                    ' which files will be analyzed', default=None)
    parser.add_argument('--vt', type=str, help='Specifies location of VirusTotal API Key', default=None)
    args = parser.parse_args()
    _setup_logging(args)
    logger = get_logger('General')
    global db_string
    db_string = args.db if args.db else 'dbname=malware user=postgres host=0.0.0.0'
    logger.info(f'Using db string "{db_string}"')
    global ANDROZOO_API_KEY
    with open(os.path.abspath(args.androzoo)) as key:
        ANDROZOO_API_KEY = key.read().strip()
    if args.vt:
        global VIRUSTOTAL_API_KEY
        with open(os.path.abspath(args.vt)) as key:
            VIRUSTOTAL_API_KEY = key.read().strip()
    try:
        global DB_CONNECTION
        DB_CONNECTION = db.connect(db_string)
    except db.Error:
        logger.fatal('Could not establish a connection to the database.')
        sys.exit(1)
    return True if args.vt else False, args.queries, args.csv
